{"version":3,"file":"ttspassage.min.js","sources":["../src/ttspassage.js"],"sourcesContent":["define(['jquery','core/log','core/str','core/templates','mod_solo/pollyhelper'], function($,log,str,templates,polly) {\n    \"use strict\"; // jshint ;_;\n\n\n    log.debug('Solo TTS Passage: initialising');\n\n    var app = {\n        //controls\n        controls: {},\n        checking: '... checking ...',\n\n        //init the module\n        init: function(uniqid){\n            this.uniqid=uniqid;\n            this.ready=false;\n            this.thesentence_number =0;\n            this.stoporpause='pause';\n            \n            //common selectors\n            this.sentenceselector = '#' + this.uniqid + '_ttssentencecont span.tbr_sentence';\n            \n            //init other stuff\n            this.init_strings();\n            this.register_controls();\n            this.register_events();\n            this.init_polly();\n        },\n\n        init_strings: function(){\n            var that =this;\n            //not used here .. just for later use\n            str.get_string('checking','mod_solo').done(function(s){that.checking=s;});\n        },\n\n        init_polly: function(){\n            var token = this.controls.ttspassagecont.attr('data-token');\n            var region = this.controls.ttspassagecont.attr('data-region');\n            var owner = 'poodll';\n            polly.init(token, region,owner);\n        },\n\n        //load all the controls so we do not have to do it later\n        register_controls: function(){\n            this.controls.ttspassagecont = $('#' + this.uniqid + '_ttspassageplayer');\n            this.controls.showttspassagebtn =  $('#' + this.uniqid + '_showttspassagebtn');\n            this.controls.selftranscript = $(\"textarea[name='selftranscript']\");\n            this.controls.ttssentencecont= $('#' + this.uniqid + '_ttssentencecont .tbr_innerdiv');\n            \n            //audio player declarations\n            this.controls.aplayer = $('#' +  this.uniqid + '_ttspassageaudio');\n            this.controls.theaplayerbtn = $('#' +  this.uniqid + '_ttspassagebutton');\n            this.controls.textblock = $('#' +  this.uniqid + '_textblock');\n            this.controls.fa = $('#' +  this.uniqid + '_ttspassagebutton .fa');\n\n            //passage lines\n            this.controls.passagelines = $(this.sentenceselector);\n        },\n\n        //attach the various event handlers we need\n        register_events: function() {\n            var that = this;\n            that.controls.showttspassagebtn.click(function(e){\n                e.preventDefault();\n                if(!that.controls.ttspassagecont.is(':visible')) {\n                    that.markup_and_show();\n                }\n                //show the widget\n                that.controls.ttspassagecont.toggle();\n            });\n\n            //AUDIO PLAYER events\n            that.controls.aplayer[0].addEventListener('ended', function(){\n                if(that.thesentence_number< that.controls.passagelines.length -1){\n                    that.thesentence_number++;\n                    that.doplayaudio(that.thesentence_number);\n                }else{\n                    that.dehighlight_all();\n                    that.controls.fa.removeClass('fa-stop');\n                    that.controls.fa.addClass('fa-volume-up');\n                    that.thesentence_number=0;\n                    that.controls.aplayer.removeAttr('src');\n                }\n            });\n\n            //handle audio player button clicks\n            that.controls.theaplayerbtn.click(function(){\n                that.controls.passagelines = $(that.sentenceselector);\n                if(!that.controls.aplayer[0].paused && !that.controls.aplayer[0].ended){\n                    log.debug('not paused and not ended');\n                    that.controls.aplayer[0].pause();\n                    if(that.stoporpause=='stop'){\n                        that.controls.aplayer[0].load();\n                        that.thesentence_number=0;\n                    }\n                    that.controls.fa.removeClass('fa-stop');\n                    that.controls.fa.addClass('fa-volume-up');\n\n                    //if paused and in limbo no src state\n                }else if(that.controls.aplayer[0].paused && that.controls.aplayer.attr('src')){\n                    log.debug('inlimbo');\n                    that.doplayaudio(that.thesentence_number);\n                    that.controls.fa.removeClass('fa-volume-up');\n                    that.controls.fa.addClass('fa-stop');\n                    //play\n                }else{\n                    log.debug('play');\n                    if(that.stoporpause=='stop'){\n                        that.thesentence_number=0;\n                    }\n                    that.doplayaudio(that.thesentence_number);\n                    that.controls.fa.removeClass('fa-volume-up');\n                    that.controls.fa.addClass('fa-stop');\n                }//end of if paused ended\n            });\n\n            //handle sentence clicks\n            $('#' + that.uniqid + '_ttssentencecont  .tbr_innerdiv').on('click', '.tbr_sentence',function(){\n                that.controls.aplayer[0].pause();\n                var sentenceindex = $(this).attr('data-sentenceindex');\n                that.controls.fa.removeClass('fa-volume-up');\n                that.controls.fa.addClass('fa-stop');\n                that.thesentence_number = sentenceindex;\n                that.doplayaudio(sentenceindex);\n            });\n\n            \n        },//end of register events\n\n        //FUNCTION:  unhighlight a sentence as active\n        dehighlight_all: function(){\n            this.controls.passagelines.removeClass('passageplayer_activesentence');\n        },\n\n        //FUNCTION:  highlight a sentence as active\n        highlight_sentence: function(thesentence){\n            this.controls.passagelines.removeClass('passageplayer_activesentence');\n            $(this.controls.passagelines[thesentence]).addClass('passageplayer_activesentence');\n            // $(sentenceselector + '[data-sentenceindex=' + thesentence + ']').addClass('passageplayer_activesentence');\n        },\n\n        //FUNCTION: play a single sentence and mark it active for display purposes\n        doplayaudio: function(thesentence){\n            log.debug(thesentence);\n            var audiourl = $(this.controls.passagelines[thesentence]).data('audiourl');\n            log.debug(audiourl);\n            this.highlight_sentence(thesentence);\n            this.controls.aplayer.attr('src',audiourl);\n            this.controls.aplayer[0].play();\n        },\n\n        markup_and_show: async function(){\n            var that = this;\n            //do the check\n            var text = that.controls.selftranscript.val();\n            //but quit if its empty\n            if(!text || text==='' || text.trim()===''){\n                return;\n            }\n            //clear the existing TTS markup\n            that.controls.ttssentencecont.empty();\n\n            //split the text into sentences\n            //this is like split but it returns the delimiters too\n            var sentences = text.match(/[^\\.\\!\\?¿¡\\.\\.\\.;]*[\\.\\!\\?¿¡\\.\\.\\.;]/g);\n            var slowspeed=1;\n            for (var i=0; i<sentences.length; i++){\n                if(sentences[i].trim()===''){continue;}\n                var audiourl = await polly.fetch_polly_url(sentences[i],slowspeed,'Amy');\n                templates.render('mod_solo/ttssentence',\n                    {sentence: sentences[i], audiourl: audiourl, sentenceindex: i}).then(\n                    function(html,js){\n                        //that.controls.player.html(html);\n                        templates.appendNodeContents(that.controls.ttssentencecont, html, js);\n                    }\n                );\n            }\n        }\n\n    };//end of return value\n    return app;\n});"],"names":["define","$","log","str","templates","polly","debug","controls","checking","init","uniqid","ready","thesentence_number","stoporpause","sentenceselector","this","init_strings","register_controls","register_events","init_polly","that","get_string","done","s","token","ttspassagecont","attr","region","showttspassagebtn","selftranscript","ttssentencecont","aplayer","theaplayerbtn","textblock","fa","passagelines","click","e","preventDefault","is","markup_and_show","toggle","addEventListener","length","doplayaudio","dehighlight_all","removeClass","addClass","removeAttr","paused","ended","pause","load","on","sentenceindex","highlight_sentence","thesentence","audiourl","data","play","async","text","val","trim","empty","sentences","match","i","fetch_polly_url","render","sentence","then","html","js","appendNodeContents"],"mappings":"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"}