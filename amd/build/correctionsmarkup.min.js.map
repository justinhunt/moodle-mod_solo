{"version":3,"file":"correctionsmarkup.min.js","sources":["../src/correctionsmarkup.js"],"sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Corrections Markup: initialising');\n\n    return {\n        //controls\n\n        controls: {},\n\n        //class definitions\n        cd: {\n            correctionscontainer: 'mod_solo_corrections_cont',\n            insertclass: 'mod_solo_finediffinsertion',\n            passagewordclass: 'mod_solo_grading_passageword',\n            passagespaceclass: 'mod_solo_grading_passagespace',\n            //previously removed\n            wordclass: 'mod_solo_grading_correctionsword',\n            spaceclass: 'mod_solo_grading_correctionsspace',\n            originalprewordclass: 'mod_solo_grading_original_preword',\n            originalpostwordclass: 'mod_solo_grading_original_postword',\n            suggestionclass: 'mod_solo_corrections_suggestedword',\n            insertionclass: 'mod_solo_corrections_insertionword',\n            wordomittedclass: 'mod_solo_corrections_omittedword',\n            aiunmatched: 'mod_solo_aiunmatched',\n            aicorrected: 'mod_solo_aicorrected',\n            aiomitted: 'mod_solo_aiomitted',\n            aiinserted: 'mod_solo_aiinserted',\n            aisuggested: 'mod_solo_aisuggested',\n        },\n\n        options: {\n            errorwords: {},\n            grammarmatches: {},\n            suggestedwords: {},\n            insertioncount: 0\n        },\n\n\n        init: function (config) {\n\n            //pick up opts from html\n            var theid = '#' + config['id'];\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                var opts = JSON.parse(configcontrol.value);\n                log.debug(opts);\n                $(theid).remove();\n\n\n                if (opts['sessionerrors'] !== '') {\n                    this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\n                } else {\n                    this.options.suggestedwords = {};\n                }\n                if (opts['sessionmatches'] !== '') {\n                    this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\n                } else {\n                    this.options.grammarmatches  = {};\n                }\n\n                if (opts['insertioncount'] !== '') {\n                    this.options.insertioncount = opts['insertioncount'];\n                }else{\n                    this.options.insertioncount = 0;\n                }\n\n\n            } else if(config.hasOwnProperty('sessionerrors') &&\n                config.hasOwnProperty('sessionmatches')&&\n                config.hasOwnProperty('insertioncount')){\n\n                    this.options.suggestedwords = JSON.parse(config['sessionerrors']);\n                    this.options.grammarmatches = JSON.parse(config['sessionmatches']);\n                    this.options.insertioncount = config['insertioncount'];\n\n            } else {\n                //if there is no config we might as well give up\n                log.debug('Corrections Markup js: No config found on page. Giving up.');\n                return;\n            }\n\n            //register the controls\n            this.register_controls();\n\n            log.debug(this.options);\n\n            //markup suggested words\n            this.markup_suggestedwords();\n            //mark up unmatched words\n            this.markup_unmatchedwords();\n            //fill original words\n            this.markup_originalwords();\n\n            //register events\n            this.register_events();\n\n        },\n\n\n        register_controls: function () {\n\n            this.controls.correctionscontainer = $(\".\" + this.cd.correctionscontainer);\n\n        },\n\n        register_events: function () {\n            var that = this;\n            //classes to apply mouseover/click events to\n            var highlightclasses='.' + this.cd.wordclass + ',.' + this.cd.spaceclass + \n                ',.' + this.cd.originalprewordclass + ',.' + this.cd.originalpostwordclass;\n\n            //set up event handlers\n            this.controls.correctionscontainer.on('click',highlightclasses, function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n\n                var correctiontype = '';//defaults to none .. its just highlighting\n                //any correction will be a suggestion but it might also be an insertion or an omission which overrides suggestion\n                if($(this).hasClass(that.cd.suggestionclass)){correctiontype='suggestion';}\n                if($(this).hasClass(that.cd.insertionclass)){correctiontype='insertion';}\n                if($(this).hasClass(that.cd.wordomittedclass)){correctiontype='omission';}\n\n                that.highlightoriginal(tpositions,correctiontype);\n                setTimeout(function () {\n                    that.dehighlightoriginal(tpositions);\n                }, 1000);\n            });\n\n            // Use mouseover event for highlighting\n            this.controls.correctionscontainer.on('mouseover',highlightclasses,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n\n                var correctiontype = '';//defaults to none .. its just highlighting and not corrected\n                //any correction will be a suggestion but it might also be an insertion or an omission which overrides suggestion\n                if($(this).hasClass(that.cd.suggestionclass)){correctiontype='suggestion';}\n                if($(this).hasClass(that.cd.insertionclass)){correctiontype='insertion';}\n                if($(this).hasClass(that.cd.wordomittedclass)){correctiontype='omission';}\n\n                that.highlightoriginal(tpositions, correctiontype);\n            });\n\n            // Use mouseout event for de-highlighting\n            this.controls.correctionscontainer.on('mouseout',highlightclasses,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.dehighlightoriginal(tpositions);\n            });\n        },\n\n        highlightoriginal: function (tpositionstring, correctiontype) {\n            var that = this;\n            var tpositions = tpositionstring.split(',');\n\n            //correction classes\n            var correctionsclasses = [];\n            correctionsclasses.push(that.cd.aicorrected);\n            if(correctiontype==='insertion') {\n                correctionsclasses.push(that.cd.aiinserted);\n            }else if(correctiontype==='omission') {\n                correctionsclasses.push(that.cd.aiomitted);\n            }else if (correctiontype==='suggestion') {\n                correctionsclasses.push(that.cd.aisuggested);\n            }\n\n            for (var i = 0; i < tpositions.length; i++) {\n                var tposition = tpositions[i];\n                if(correctiontype==='insertion') {\n                    //if the word is an insertion, then we only highlight spaces, because no word is altered in the original\n                    $('#' + that.cd.passagespaceclass + '_' + tposition).addClass(correctionsclasses);\n                } else {\n                    $('#' + that.cd.passagewordclass + '_' + tposition).addClass(correctionsclasses);\n                    //to highlight connecting spaces we check if we are between tpositions\n                    if(i < tpositions.length - 1) {\n                        $('#' + that.cd.passagespaceclass + '_' + tposition).addClass(correctionsclasses);\n                    }\n                }\n            }\n        },\n\n        dehighlightoriginal: function (tpositionstring) {\n            var that = this;\n            var correctionsclasses = [that.cd.aicorrected, that.cd.aiinserted, that.cd.aiomitted, that.cd.aisuggested];\n            var tpositions = tpositionstring.split(',');\n            $.each(tpositions, function (index, tposition) {\n                $('#' + that.cd.passagewordclass + '_' + tposition).removeClass(correctionsclasses);\n                $('#' + that.cd.passagespaceclass + '_' + tposition).removeClass(correctionsclasses);\n            });\n        },\n\n        markup_suggestedwords: function () {\n            var m = this;\n            $.each(m.options.suggestedwords, function (index) {\n                    $('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber)).addClass(m.cd.suggestionclass);\n                }\n            );\n            //sadly the above code only takes us to the last match. NOT to the last suggestion\n            //so from the last match to the end of passage (if there are any words left) we mark those up too\n            //we use the insertion count to guess the transcript indexes of end words. This is used to highlight passage on mouseover in view summary\n            //m.options.grammarmatches is js object, so we can't use array functions on it.\n            if(Object.keys(m.options.grammarmatches).length > 0) {\n                var lastpposition=0;\n                var lasttposition=0;\n                $.each(m.options.grammarmatches, function (index, lastmatch) {\n                    lastpposition = Number(lastmatch.pposition);\n                    lasttposition = Number(lastmatch.tposition);\n                });\n                var lastwordnumber = Number(lastpposition);\n                var tpositions = [];\n                for(var i = lasttposition + 1; i <= lasttposition + m.options.insertioncount + 1; i++) {\n                    tpositions.push(i);\n                }\n                var allwords = $('.' + m.cd.correctionscontainer + ' .' + m.cd.wordclass);\n                allwords.filter(function() {\n                    var wordNumber = Number($(this).data('wordnumber'));\n                    return wordNumber > lastwordnumber && !$(this).hasClass(m.cd.suggestionclass);\n                }).addClass(m.cd.suggestionclass).attr('data-tpositions', tpositions.join(','));\n            }\n        },\n\n        //now we step through all the matched words, and look for \"gaps\"\n        //we marked up new/replaced words in \"markup_suggestedwords\", but missing words can't be marked up(they are not there)\n        //so we highlight the space where the missing word would have been\n        //NB process is .. we step through each word in the corrected text. Each word has a tposition and pposition\n        //NB tposition is the position in the original text.\n        //NB pposition is the position in the corrected text.\n        //NB if the tposition of the current word in the corrected text has jumped since the previous word, then we have a gap\n        // .. \"tposition\" and \"pposition\" are a misleading terms here ..sorry\n        markup_unmatchedwords: function () {\n            var that = this;\n            if (this.options.grammarmatches) {\n                //we need a dummy prevmatch for the first loop\n                var prevmatch = {tposition: 0, pposition: 0};\n                $.each(this.options.grammarmatches, function (index, match) {\n                    //if there is a gap since the previous word match in the tposition\n                    //AND if we didn't just add a suggestion (which will cause a transcript mismatch too) then\n                    // it's a missing word (ie in original but not in the corrected text)\n                    //we want to get the prior space and highlight it to show its missing\n                    if((match.tposition - prevmatch.tposition)>1) {\n                        var missingwordspacenumber = match.pposition - 1;\n                        if(missingwordspacenumber>0) {\n                            //if we have a missing word space number greater than 0 (should add a 0 space actually)\n                            //and it's not either side of a suggested word, then highlight\n                            if (!$('#' + that.cd.wordclass + '_' + match.pposition).hasClass(that.cd.suggestionclass)&&\n                                !$('#' + that.cd.wordclass + '_' + missingwordspacenumber).hasClass(that.cd.suggestionclass)) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).addClass(that.cd.wordomittedclass);\n                            }\n                            //compile a list of tpositions that we have missed. So we can highlight them on \"tap\"\n                            var tpositions = [];\n                            for(var i = prevmatch.tposition + 1; i < match.tposition; i++) {\n                                tpositions.push(i);\n                            }\n                            //loop through the words and spaces that make up the gap and record the tpositions\n                            //if it's just a missing word(s) with no corrections, we simply mark up the space with the tpositions\n                            var p_gapcount = (match.pposition - prevmatch.pposition) -1;\n                            if(p_gapcount ===0) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).attr('data-tpositions', tpositions.join(','));\n                            }else{\n                                for(var z = prevmatch.pposition + 1; z < match.pposition; z++) {\n                                    $('#' + that.cd.spaceclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                    $('#' + that.cd.wordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                 //   $('#' + that.cd.originalprewordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                 //   $('#' + that.cd.originalpostwordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                }\n                            }\n                        }\n                    }else if(match.pposition - prevmatch.pposition > 1) {\n                        //if there is a gap in the pposition, then we have an extra word in the corrected text\n                        //we want to highlight the space where the extra word would have been in the original text\n                        //eg original \"one two three four five\" corrected to \"one two twopointfive three four five\"\n                        // we want to highlight the space between \"two\" and \"three\" in original since the p position has jumped by more than one\n                        for (var insertedword = prevmatch.pposition + 1; insertedword < match.pposition; insertedword++) {\n                            $('#' + that.cd.wordclass + '_' + insertedword).addClass(that.cd.insertionclass);\n                            $('#' + that.cd.wordclass + '_' + insertedword).attr('data-tpositions', prevmatch.tposition);\n                          //  $('#' + that.cd.originalprewordclass + '_' + insertedword).attr('data-tpositions', prevmatch.tposition);\n                          //  $('#' + that.cd.originalpostwordclass + '_' + insertedword).attr('data-tpositions', prevmatch.tposition);\n                        }\n                    }\n\n                    //Always mark up the current words tposition as well\n                    $('#' + that.cd.wordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\n                   // $('#' + that.cd.originalprewordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\n                   // $('#' + that.cd.originalpostwordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\n                    //store this match as the new prevmatch so on the next loop pass we can compare\n                    prevmatch = match;\n                });//end of $ each loop\n            }\n        },\n\n        //original CSS classes\n        //The original classes are to show the original passage word before or after the corrections word\n        //because of the layout, \"rewritten/added words\" [corrections] will show in green, after the original words [red]\n        //but \"removed(omitted) words\" [corrections] will show as a green space  after the original words [red]\n        // so the span layout for each word in the corrections is:\n        // [original_preword][correctionsword][original_postword][correctionsspace]\n        // suggested word: (original)He eat apples => (corrected)He eats apples => \n        //    [original_preword: \"eat->\"][correctionsword: \"eats\"][original_postword][correctionsspace]\n        // removed(omitted) word: (original)He eat devours the apples=> (corrected) He devours the apples =>\n        //    [original_preword: ][correctionsword: \"He\"][original_postword: \"eat->\" ][correctionsspace: \" \"]\n        markup_originalwords: function () {\n            var that = this;\n            var processed_tpositions=[];\n            var allwordsspaces = $('.' + that.cd.correctionscontainer + ' .' + that.cd.wordclass +', .' + that.cd.correctionscontainer + ' .' + that.cd.spaceclass);\n            allwordsspaces.each(function () {\n                var wordnumber = Number($(this).data('wordnumber'));\n                if($(this).hasClass(that.cd.suggestionclass)||$(this).hasClass(that.cd.wordomittedclass)){\n                    var data_tpositions=$(this).attr('data-tpositions');\n                    \n                    //if we already added originals, we dont want to do it again, \n                    //eg (original)I the happy man => (corrections)I am a happy man\n                    // we only want to add original \"the\" on corrections \"am\" .. and not also on \"a\"\n                    if(processed_tpositions.includes(data_tpositions)){return;}\n                    processed_tpositions.push(data_tpositions);\n\n                    var tpositions = data_tpositions.split(',');\n                    var originalwords=[];\n                    for (var i = 0; i < tpositions.length; i++) {\n                        var tposition = tpositions[i];\n                        originalwords.push($('#' + that.cd.passagewordclass + '_' + tposition).text());\n                    }\n                    \n                    if(originalwords.length>0){\n                        var originaltext=originalwords.join(' ') + '->';\n                        if($(this).hasClass(that.cd.suggestionclass) && $(this).hasClass(that.cd.insertionclass)) {\n                            //if it is an inserted word a underscore(since original does not exist) shows before the current word\n                            //a space would be better, but then it would be 2 spaces which html collapses to 1 so it would be invisible\n                            $('#' + that.cd.originalprewordclass + '_' + wordnumber).text('_->');\n                            $('#' + that.cd.originalprewordclass + '_' + (wordnumber)).attr('data-tpositions', '');\n                        }else if($(this).hasClass(that.cd.suggestionclass)){\n                            //if it is a suggested word it shows before the current word (green highlighted)\n                            $('#' + that.cd.originalprewordclass + '_' + wordnumber).text(originaltext);\n                            $('#' + that.cd.originalprewordclass + '_' + (wordnumber)).attr('data-tpositions',data_tpositions);\n                        }else if($(this).hasClass(that.cd.wordomittedclass)){\n                            //if it is an omitted word it shows after the current word (and before the green highlighted space)\n                            //since we are before the space we prepend a space so it doesn't run on after current word\n                            $('#' + that.cd.originalpostwordclass + '_' + (wordnumber)).text(' ' + originaltext);\n                            $('#' + that.cd.originalpostwordclass + '_' + (wordnumber)).attr('data-tpositions',data_tpositions);\n                        }\n                    }\n                  \n                }\n            });\n        },\n    };\n});"],"names":["define","$","log","debug","controls","cd","correctionscontainer","insertclass","passagewordclass","passagespaceclass","wordclass","spaceclass","originalprewordclass","originalpostwordclass","suggestionclass","insertionclass","wordomittedclass","aiunmatched","aicorrected","aiomitted","aiinserted","aisuggested","options","errorwords","grammarmatches","suggestedwords","insertioncount","init","config","theid","configcontrol","get","opts","JSON","parse","value","remove","hasOwnProperty","register_controls","this","markup_suggestedwords","markup_unmatchedwords","markup_originalwords","register_events","that","highlightclasses","on","tpositions","attr","correctiontype","hasClass","highlightoriginal","setTimeout","dehighlightoriginal","tpositionstring","split","correctionsclasses","push","i","length","tposition","addClass","each","index","removeClass","m","wordnumber","Object","keys","lastpposition","lasttposition","lastmatch","Number","pposition","lastwordnumber","filter","data","join","prevmatch","match","missingwordspacenumber","z","insertedword","processed_tpositions","data_tpositions","includes","originalwords","text","originaltext"],"mappings":"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"}