{"version":3,"file":"correctionsmarkup.min.js","sources":["../src/correctionsmarkup.js"],"sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Corrections Markup: initialising');\n\n    return {\n        //controls\n\n        controls: {},\n\n        //class definitions\n        cd: {\n            correctionscontainer: 'mod_solo_corrections_cont',\n            insertclass: 'mod_solo_finediffinsertion',\n            //previously removed\n            wordclass: 'mod_solo_grading_correctionsword',\n            spaceclass: 'mod_solo_grading_correctionsspace',\n            suggestionclass: 'mod_solo_corrections_suggestedword',\n            wordomittedclass: 'mod_solo_corrections_omittedword',\n            aiunmatched: 'mod_solo_aiunmatched',\n        },\n\n        options: {\n            errorwords: {},\n            grammarmatches: {},\n            suggestedwords: {}\n        },\n\n\n        init: function (config) {\n\n            //pick up opts from html\n            var theid = '#' + config['id'];\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                var opts = JSON.parse(configcontrol.value);\n                log.debug(opts);\n                $(theid).remove();\n\n\n                if (opts['sessionerrors'] !== '') {\n                    this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\n                } else {\n                    this.options.suggestedwords = {};\n                }\n                if (opts['sessionmatches'] !== '') {\n                    this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\n                } else {\n                    this.options.grammarmatches  = {};\n                }\n\n\n            } else if(config.hasOwnProperty('sessionerrors') &&\n                config.hasOwnProperty('sessionmatches')){\n\n                    this.options.suggestedwords = JSON.parse(config['sessionerrors']);\n                    this.options.grammarmatches = JSON.parse(config['sessionmatches']);\n\n            } else {\n                //if there is no config we might as well give up\n                log.debug('Corrections Markup js: No config found on page. Giving up.');\n                return;\n            }\n\n            //register the controls\n            this.register_controls();\n\n            log.debug(this.options);\n\n            //markup suggested words\n            this.markup_suggestedwords();\n            //mark up unmatched words\n            this.markup_unmatchedwords();\n\n            //register events\n            this.register_events();\n\n        },\n\n\n        register_controls: function () {\n\n            this.controls.correctionscontainer = $(\".\" + this.cd.correctionscontainer);\n\n        },\n\n        register_events: function () {\n            var that = this;\n            //set up event handlers\n            this.controls.correctionscontainer.on('click','.' + this.cd.wordclass, function () {\n                    var wordnumber = parseInt($(this).attr('data-wordnumber'));\n                    //do something\n                log.debug(wordnumber);\n\n            });\n\n        },\n\n\n        markup_suggestedwords: function () {\n            var m = this;\n            $.each(m.options.suggestedwords, function (index) {\n                log.debug('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber));\n                    $('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber)).addClass(m.cd.suggestionclass);\n                }\n            );\n        },\n\n        //now we step through all the matched words, and look for \"gaps\" between original and corrected\n        //we marked up new/replaced words, but missing words cant marked up(they are not there)\n        // we want to flag them though ..\n        markup_unmatchedwords: function () {\n            var that = this;\n            if (this.options.grammarmatches) {\n                var prevmatch = 0;\n                $.each(this.options.grammarmatches, function (index, match) {\n                    //if there is a gap since the previous word match, it's a missing word (ie not in original)\n                    //AND we didnt just add a suggestion (which will cause a transcript mismatch too) then\n                    //we want to get the prior space and highlight it to show its missing\n                    if((match.tposition - prevmatch)>1) {\n                        var missingspacenumber = match.pposition - 1;\n                        if(missingspacenumber>0) {\n                            //if we have a missing space number greater than 0 (should add a 0 space actually)\n                            //and its not either side of a suggested word, then highlight\n                            if (!$('#' + that.cd.wordclass + '_' + match.pposition).hasClass(that.cd.suggestionclass)&&\n                                !$('#' + that.cd.wordclass + '_' + missingspacenumber).hasClass(that.cd.suggestionclass)) {\n                                $('#' + that.cd.spaceclass + '_' + missingspacenumber).addClass(that.cd.wordomittedclass);\n                            }\n                        }\n                    }\n                    prevmatch = match.tposition;\n                    /*\n                    if((match.tposition - prevmatch)>1) {\n                        var missingcnt = match.tposition - prevmatch -1;\n                        for(var mi= 0; mi <missingcnt;mi++) {\n                            var missingwordnumber = match.tposition - 1 - mi;\n                            if(!$('#' + that.cd.wordclass + '_' + missingwordnumber).hasClass(that.cd.suggestionclass)){\n                                $('#' + that.cd.wordclass + '_' + missingwordnumber).addClass(that.cd.wordomittedclass);\n                            }\n                        }\n                    }\n                    prevmatch = match.tposition;\n                    */\n\n                });\n            }\n\n        },\n    };\n});"],"names":["define","$","log","debug","controls","cd","correctionscontainer","insertclass","wordclass","spaceclass","suggestionclass","wordomittedclass","aiunmatched","options","errorwords","grammarmatches","suggestedwords","init","config","theid","configcontrol","get","opts","JSON","parse","value","remove","hasOwnProperty","register_controls","this","markup_suggestedwords","markup_unmatchedwords","register_events","on","wordnumber","parseInt","attr","m","each","index","addClass","that","prevmatch","match","tposition","missingspacenumber","pposition","hasClass"],"mappings":"AAAAA,oCAAO,CAAC,SAAU,aAAa,SAAUC,EAAGC,YAGxCA,IAAIC,MAAM,oCAEH,CAGHC,SAAU,GAGVC,GAAI,CACAC,qBAAsB,4BACtBC,YAAa,6BAEbC,UAAW,mCACXC,WAAY,oCACZC,gBAAiB,qCACjBC,iBAAkB,mCAClBC,YAAa,wBAGjBC,QAAS,CACLC,WAAY,GACZC,eAAgB,GAChBC,eAAgB,IAIpBC,KAAM,SAAUC,YAGRC,MAAQ,IAAMD,OAAM,GACpBE,cAAgBnB,EAAEkB,OAAOE,IAAI,MAC7BD,cAAe,KACXE,KAAOC,KAAKC,MAAMJ,cAAcK,OACpCvB,IAAIC,MAAMmB,MACVrB,EAAEkB,OAAOO,SAGqB,KAA1BJ,KAAI,mBACCT,QAAQG,eAAiBO,KAAKC,MAAMF,KAAI,oBAExCT,QAAQG,eAAiB,GAEH,KAA3BM,KAAI,oBACCT,QAAQE,eAAiBQ,KAAKC,MAAMF,KAAI,qBAExCT,QAAQE,eAAkB,OAIhC,CAAA,IAAGG,OAAOS,eAAe,mBAC5BT,OAAOS,eAAe,8BAOtBzB,IAAIC,MAAM,mEALDU,QAAQG,eAAiBO,KAAKC,MAAMN,OAAM,oBAC1CL,QAAQE,eAAiBQ,KAAKC,MAAMN,OAAM,qBASlDU,oBAEL1B,IAAIC,MAAM0B,KAAKhB,cAGViB,6BAEAC,6BAGAC,mBAKTJ,kBAAmB,gBAEVxB,SAASE,qBAAuBL,EAAE,IAAM4B,KAAKxB,GAAGC,uBAIzD0B,gBAAiB,gBAGR5B,SAASE,qBAAqB2B,GAAG,QAAQ,IAAMJ,KAAKxB,GAAGG,WAAW,eAC3D0B,WAAaC,SAASlC,EAAE4B,MAAMO,KAAK,oBAE3ClC,IAAIC,MAAM+B,gBAOlBJ,sBAAuB,eACfO,EAAIR,KACR5B,EAAEqC,KAAKD,EAAExB,QAAQG,gBAAgB,SAAUuB,OACvCrC,IAAIC,MAAM,IAAMkC,EAAEhC,GAAGC,qBAAuB,KAAO+B,EAAEhC,GAAGG,UAAY,IAAO6B,EAAExB,QAAQG,eAAeuB,OAAOL,YACvGjC,EAAE,IAAMoC,EAAEhC,GAAGC,qBAAuB,KAAO+B,EAAEhC,GAAGG,UAAY,IAAO6B,EAAExB,QAAQG,eAAeuB,OAAOL,YAAaM,SAASH,EAAEhC,GAAGK,qBAQ1IqB,sBAAuB,eACfU,KAAOZ,QACPA,KAAKhB,QAAQE,eAAgB,KACzB2B,UAAY,EAChBzC,EAAEqC,KAAKT,KAAKhB,QAAQE,gBAAgB,SAAUwB,MAAOI,UAI7CA,MAAMC,UAAYF,UAAW,EAAG,KAC5BG,mBAAqBF,MAAMG,UAAY,EACxCD,mBAAmB,IAGb5C,EAAE,IAAMwC,KAAKpC,GAAGG,UAAY,IAAMmC,MAAMG,WAAWC,SAASN,KAAKpC,GAAGK,kBACpET,EAAE,IAAMwC,KAAKpC,GAAGG,UAAY,IAAMqC,oBAAoBE,SAASN,KAAKpC,GAAGK,kBACxET,EAAE,IAAMwC,KAAKpC,GAAGI,WAAa,IAAMoC,oBAAoBL,SAASC,KAAKpC,GAAGM,mBAIpF+B,UAAYC,MAAMC"}