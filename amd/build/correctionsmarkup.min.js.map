{"version":3,"file":"correctionsmarkup.min.js","sources":["../src/correctionsmarkup.js"],"sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Corrections Markup: initialising');\n\n    return {\n        //controls\n\n        controls: {},\n\n        //class definitions\n        cd: {\n            correctionscontainer: 'mod_solo_corrections_cont',\n            insertclass: 'mod_solo_finediffinsertion',\n            passagewordclass: 'mod_solo_grading_passageword',\n            //previously removed\n            wordclass: 'mod_solo_grading_correctionsword',\n            spaceclass: 'mod_solo_grading_correctionsspace',\n            suggestionclass: 'mod_solo_corrections_suggestedword',\n            wordomittedclass: 'mod_solo_corrections_omittedword',\n            aiunmatched: 'mod_solo_aiunmatched',\n            aicorrected: 'mod_solo_aicorrected',\n            aiomitted: 'mod_solo_aiomitted',\n            aiinserted: 'mod_solo_aiinserted',\n            aisuggested: 'mod_solo_aisuggested',\n        },\n\n        options: {\n            errorwords: {},\n            grammarmatches: {},\n            suggestedwords: {},\n            insertioncount: 0\n        },\n\n\n        init: function (config) {\n\n            //pick up opts from html\n            var theid = '#' + config['id'];\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                var opts = JSON.parse(configcontrol.value);\n                log.debug(opts);\n                $(theid).remove();\n\n\n                if (opts['sessionerrors'] !== '') {\n                    this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\n                } else {\n                    this.options.suggestedwords = {};\n                }\n                if (opts['sessionmatches'] !== '') {\n                    this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\n                } else {\n                    this.options.grammarmatches  = {};\n                }\n\n                if (opts['insertioncount'] !== '') {\n                    this.options.insertioncount = opts['insertioncount'];\n                }else{\n                    this.options.insertioncount = 0;\n                }\n\n\n            } else if(config.hasOwnProperty('sessionerrors') &&\n                config.hasOwnProperty('sessionmatches')&&\n                config.hasOwnProperty('insertioncount')){\n\n                    this.options.suggestedwords = JSON.parse(config['sessionerrors']);\n                    this.options.grammarmatches = JSON.parse(config['sessionmatches']);\n                    this.options.insertioncount = config['insertioncount'];\n\n            } else {\n                //if there is no config we might as well give up\n                log.debug('Corrections Markup js: No config found on page. Giving up.');\n                return;\n            }\n\n            //register the controls\n            this.register_controls();\n\n            log.debug(this.options);\n\n            //markup suggested words\n            this.markup_suggestedwords();\n            //mark up unmatched words\n            this.markup_unmatchedwords();\n\n            //register events\n            this.register_events();\n\n        },\n\n\n        register_controls: function () {\n\n            this.controls.correctionscontainer = $(\".\" + this.cd.correctionscontainer);\n\n        },\n\n        register_events: function () {\n            var that = this;\n            //set up event handlers\n            this.controls.correctionscontainer.on('click','.' + this.cd.wordclass + ',.' + this.cd.spaceclass, function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n\n                var correctiontype = '';//defaults to none .. its just highlighting\n                //any correction will be a suggestion but it might also be an insertion or an omission which overrides suggestion\n                if($(this).hasClass(that.cd.suggestionclass)){correctiontype='suggestion';}\n                if($(this).hasClass(that.cd.insertionclass)){correctiontype='insertion';}\n                if($(this).hasClass(that.cd.wordomittedclass)){correctiontype='omission';}\n\n                that.highlightoriginal(tpositions,correctiontype);\n                setTimeout(function () {\n                    that.dehighlightoriginal(tpositions);\n                }, 1000);\n            });\n\n            // Use mouseover event for highlighting\n            this.controls.correctionscontainer.on('mouseover', '.' + this.cd.wordclass + ',.' + this.cd.spaceclass,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n\n                var correctiontype = '';//defaults to none .. its just highlighting and not corrected\n                //any correction will be a suggestion but it might also be an insertion or an omission which overrides suggestion\n                if($(this).hasClass(that.cd.suggestionclass)){correctiontype='suggestion';}\n                if($(this).hasClass(that.cd.insertionclass)){correctiontype='insertion';}\n                if($(this).hasClass(that.cd.wordomittedclass)){correctiontype='omission';}\n\n                that.highlightoriginal(tpositions, correctiontype);\n            });\n\n            // Use mouseout event for de-highlighting\n            this.controls.correctionscontainer.on('mouseout','.' + this.cd.wordclass + ',.' + this.cd.spaceclass,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.dehighlightoriginal(tpositions);\n            });\n        },\n\n        highlightoriginal: function (tpositionstring, correctiontype) {\n            var that = this;\n            var tpositions = tpositionstring.split(',');\n\n            //correction classes\n            var correctionsclasses = [];\n            correctionsclasses.push(that.cd.aicorrected);\n            if(correctiontype==='insertion') {\n                correctionsclasses.push(that.cd.aiinserted);\n            }else if(correctiontype==='omission') {\n                correctionsclasses.push(that.cd.aiomitted);\n            }else if (correctiontype==='suggestion') {\n                correctionsclasses.push(that.cd.aisuggested);\n            }\n\n            for (var i = 0; i < tpositions.length; i++) {\n                var tposition = tpositions[i];\n                if(correctiontype==='insertion') {\n                    //if the word is an insertion, then we only highlight spaces, because no word is altered in the original\n                    $('#' + that.cd.passagespaceclass + '_' + tposition).addClass(correctionsclasses);\n                } else {\n                    $('#' + that.cd.passagewordclass + '_' + tposition).addClass(correctionsclasses);\n                    //to highlight connecting spaces we check if we are between tpositions\n                    if(i < tpositions.length - 1) {\n                        $('#' + that.cd.passagespaceclass + '_' + tposition).addClass(correctionsclasses);\n                    }\n                }\n            }\n        },\n\n        dehighlightoriginal: function (tpositionstring) {\n            var that = this;\n            var correctionsclasses = [that.cd.aicorrected, that.cd.aiinserted, that.cd.aiomitted, that.cd.aisuggestion];\n            var tpositions = tpositionstring.split(',');\n            $.each(tpositions, function (index, tposition) {\n                $('#' + that.cd.passagewordclass + '_' + tposition).removeClass(correctionsclasses);\n                $('#' + that.cd.passagespaceclass + '_' + tposition).removeClass(correctionsclasses);\n            });\n        },\n\n        markup_suggestedwords: function () {\n            var m = this;\n            $.each(m.options.suggestedwords, function (index) {\n                    $('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber)).addClass(m.cd.suggestionclass);\n                }\n            );\n            //sadly the above code only takes us to the last match. NOT to the last suggestion\n            //so from the last match to the end of passage (if there are any words left) we mark those up too\n            //we use the insertion count to guess the transcript indexes of end words. This is used to highlight passage on mouseover in view summary\n            //m.options.grammarmatches is js object, so we can't use array functions on it.\n            if(Object.keys(m.options.grammarmatches).length > 0) {\n                var lastpposition=0;\n                var lasttposition=0;\n                $.each(m.options.grammarmatches, function (index, lastmatch) {\n                    lastpposition = Number(lastmatch.pposition);\n                    lasttposition = Number(lastmatch.tposition);\n                });\n                var lastwordnumber = Number(lastpposition);\n                var tpositions = [];\n                for(var i = lasttposition + 1; i <= lasttposition + m.options.insertioncount + 1; i++) {\n                    tpositions.push(i);\n                }\n                var allwords = $('.' + m.cd.correctionscontainer + ' .' + m.cd.wordclass);\n                allwords.filter(function() {\n                    var wordNumber = Number($(this).data('wordnumber'));\n                    return wordNumber > lastwordnumber && !$(this).hasClass(m.cd.suggestionclass);\n                }).addClass(m.cd.suggestionclass).attr('data-tpositions', tpositions.join(','));\n            }\n        },\n\n        //now we step through all the matched words, and look for \"gaps\"\n        //we marked up new/replaced words in \"markup_suggestedwords\", but missing words can't be marked up(they are not there)\n        //so we highlight the space where the missing word would have been\n        //NB process is .. we step through each word in the corrected text. Each word has a tposition and pposition\n        //NB tposition is the position in the original text.\n        //NB pposition is the position in the corrected text.\n        //NB if the tposition of the current word in the corrected text has jumped since the previous word, then we have a gap\n        // .. \"tposition\" and \"pposition\" are a misleading terms here ..sorry\n        //it would be possible to fetch the missing words and toggle or highlight them, but we did not do that yet\n        markup_unmatchedwords: function () {\n            var that = this;\n            if (this.options.grammarmatches) {\n                //we need a dummy prevmatch for the first loop\n                var prevmatch = {tposition: 0, pposition: 0};\n                $.each(this.options.grammarmatches, function (index, match) {\n                    //if there is a gap since the previous word match in the tposition\n                    //AND if we didn't just add a suggestion (which will cause a transcript mismatch too) then\n                    // it's a missing word (ie in original but not in the corrected text)\n                    //we want to get the prior space and highlight it to show its missing\n                    if((match.tposition - prevmatch.tposition)>1) {\n                        var missingwordspacenumber = match.pposition - 1;\n                        if(missingwordspacenumber>0) {\n                            //if we have a missing word space number greater than 0 (should add a 0 space actually)\n                            //and it's not either side of a suggested word, then highlight\n                            if (!$('#' + that.cd.wordclass + '_' + match.pposition).hasClass(that.cd.suggestionclass)&&\n                                !$('#' + that.cd.wordclass + '_' + missingwordspacenumber).hasClass(that.cd.suggestionclass)) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).addClass(that.cd.wordomittedclass);\n                            }\n                            //compile a list of tpositions that we have missed. So we can highlight them on \"tap\"\n                            var tpositions = [];\n                            for(var i = prevmatch.tposition + 1; i < match.tposition; i++) {\n                                tpositions.push(i);\n                            }\n                            //loop through the words and spaces that make up the gap and record the tpositions\n                            //if it's just a missing word(s) with no corrections, we simply mark up the space with the tpositions\n                            var p_gapcount = (match.pposition - prevmatch.pposition) -1;\n                            if(p_gapcount ===0) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).attr('data-tpositions', tpositions.join(','));\n                            }else{\n                                for(var z = prevmatch.pposition + 1; z < match.pposition; z++) {\n                                    $('#' + that.cd.spaceclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                    $('#' + that.cd.wordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                }\n                            }\n                        }\n                    }else if(match.pposition - prevmatch.pposition > 1) {\n                        //if there is a gap in the pposition, then we have an extra word in the corrected text\n                        //we want to highlight the space where the extra word would have been in the original text\n                        //eg original \"one two three four five\" corrected to \"one two twopointfive three four five\"\n                        // we want to highlight the space between \"two\" and \"three\" in original since the p position has jumped by more than one\n                        for (var insertedword = prevmatch.pposition + 1; insertedword < match.pposition; insertedword++) {\n                            $('#' + that.cd.wordclass + '_' + insertedword).addClass(that.cd.insertionclass);\n                            $('#' + that.cd.wordclass + '_' + insertedword).attr('data-tpositions', prevmatch.tposition);\n                        }\n                    }\n\n                    //Always mark up the current words tposition as well\n                    $('#' + that.cd.wordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\n                    //store this match as the new prevmatch so on the next loop pass we can compare\n                    prevmatch = match;\n                });//end of $ each loop\n            }\n\n        },\n    };\n});"],"names":["define","$","log","debug","controls","cd","correctionscontainer","insertclass","passagewordclass","wordclass","spaceclass","suggestionclass","wordomittedclass","aiunmatched","aicorrected","aiomitted","aiinserted","aisuggested","options","errorwords","grammarmatches","suggestedwords","insertioncount","init","config","theid","configcontrol","get","opts","JSON","parse","value","remove","hasOwnProperty","register_controls","this","markup_suggestedwords","markup_unmatchedwords","register_events","that","on","tpositions","attr","correctiontype","hasClass","insertionclass","highlightoriginal","setTimeout","dehighlightoriginal","tpositionstring","split","correctionsclasses","push","i","length","tposition","passagespaceclass","addClass","aisuggestion","each","index","removeClass","m","wordnumber","Object","keys","lastpposition","lasttposition","lastmatch","Number","pposition","lastwordnumber","filter","data","join","prevmatch","match","missingwordspacenumber","z","insertedword"],"mappings":"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"}