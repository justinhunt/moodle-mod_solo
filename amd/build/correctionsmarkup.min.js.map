{"version":3,"file":"correctionsmarkup.min.js","sources":["../src/correctionsmarkup.js"],"sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Corrections Markup: initialising');\n\n    return {\n        //controls\n\n        controls: {},\n\n        //class definitions\n        cd: {\n            correctionscontainer: 'mod_solo_corrections_cont',\n            insertclass: 'mod_solo_finediffinsertion',\n            passagewordclass: 'mod_solo_grading_passageword',\n            //previously removed\n            wordclass: 'mod_solo_grading_correctionsword',\n            spaceclass: 'mod_solo_grading_correctionsspace',\n            suggestionclass: 'mod_solo_corrections_suggestedword',\n            wordomittedclass: 'mod_solo_corrections_omittedword',\n            aiunmatched: 'mod_solo_aiunmatched',\n            aicorrected: 'mod_solo_aicorrected'\n        },\n\n        options: {\n            errorwords: {},\n            grammarmatches: {},\n            suggestedwords: {}\n        },\n\n\n        init: function (config) {\n\n            //pick up opts from html\n            var theid = '#' + config['id'];\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                var opts = JSON.parse(configcontrol.value);\n                log.debug(opts);\n                $(theid).remove();\n\n\n                if (opts['sessionerrors'] !== '') {\n                    this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\n                } else {\n                    this.options.suggestedwords = {};\n                }\n                if (opts['sessionmatches'] !== '') {\n                    this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\n                } else {\n                    this.options.grammarmatches  = {};\n                }\n\n\n            } else if(config.hasOwnProperty('sessionerrors') &&\n                config.hasOwnProperty('sessionmatches')){\n\n                    this.options.suggestedwords = JSON.parse(config['sessionerrors']);\n                    this.options.grammarmatches = JSON.parse(config['sessionmatches']);\n\n            } else {\n                //if there is no config we might as well give up\n                log.debug('Corrections Markup js: No config found on page. Giving up.');\n                return;\n            }\n\n            //register the controls\n            this.register_controls();\n\n            log.debug(this.options);\n\n            //markup suggested words\n            this.markup_suggestedwords();\n            //mark up unmatched words\n            this.markup_unmatchedwords();\n\n            //register events\n            this.register_events();\n\n        },\n\n\n        register_controls: function () {\n\n            this.controls.correctionscontainer = $(\".\" + this.cd.correctionscontainer);\n\n        },\n\n        register_events: function () {\n            var that = this;\n            //set up event handlers\n            this.controls.correctionscontainer.on('click','.' + this.cd.wordclass + ',.' + this.cd.spaceclass, function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.highlightoriginal(tpositions);\n                setTimeout(function () {\n                    that.dehighlightoriginal(tpositions);\n                }, 1000);\n            });\n\n            // Use mouseover event for highlighting\n            this.controls.correctionscontainer.on('mouseover', '.' + this.cd.wordclass + ',.' + this.cd.spaceclass,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.highlightoriginal(tpositions);\n            });\n\n            // Use mouseout event for de-highlighting\n            this.controls.correctionscontainer.on('mouseout','.' + this.cd.wordclass + ',.' + this.cd.spaceclass,  function () {\n                var tpositions = $(this).attr('data-tpositions');\n                if (typeof tpositions === 'undefined' || tpositions === '') {return;}\n                that.dehighlightoriginal(tpositions);\n            });\n        },\n\n        highlightoriginal: function (tpositionstring) {\n            var that = this;\n            var tpositions = tpositionstring.split(',');\n            $.each(tpositions, function (index, tposition) {\n                $('#' + that.cd.passagewordclass + '_' + tposition).addClass(that.cd.aicorrected);\n            });\n\n        },\n        dehighlightoriginal: function (tpositionstring) {\n            var that = this;\n            var tpositions = tpositionstring.split(',');\n            $.each(tpositions, function (index, tposition) {\n                $('#' + that.cd.passagewordclass + '_' + tposition).removeClass(that.cd.aicorrected);\n            });\n        },\n\n        markup_suggestedwords: function () {\n            var m = this;\n            $.each(m.options.suggestedwords, function (index) {\n                    $('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber)).addClass(m.cd.suggestionclass);\n                }\n            );\n        },\n\n        //now we step through all the matched words, and look for \"gaps\"\n        //we marked up new/replaced words in \"markup_suggestedwords\", but missing words can't be marked up(they are not there)\n        //so we highlight the space where the missing word would have been\n        //NB process is .. we step through each word in the corrected text. Each word has a tposition and pposition\n        //NB tposition is the position in the original text.\n        //NB pposition is the position in the corrected text.\n        //NB if the tposition of the current word in the corrected text has jumped since the previous word, then we have a gap\n        // .. \"tposition\" and \"pposition\" are a misleading terms here ..sorry\n        //it would be possible to fetch the missing words and toggle or highlight them, but we did not do that yet\n        markup_unmatchedwords: function () {\n            var that = this;\n            if (this.options.grammarmatches) {\n                //we need a dummy prevmatch for the first loop\n                var prevmatch = {tposition: 0, pposition: 0};\n                $.each(this.options.grammarmatches, function (index, match) {\n                    //if there is a gap since the previous word match in the tposition\n                    //AND if we didn't just add a suggestion (which will cause a transcript mismatch too) then\n                    // it's a missing word (ie in original but not in the corrected text)\n                    //we want to get the prior space and highlight it to show its missing\n                    if((match.tposition - prevmatch.tposition)>1) {\n                        var missingwordspacenumber = match.pposition - 1;\n                        if(missingwordspacenumber>0) {\n                            //if we have a missing word space number greater than 0 (should add a 0 space actually)\n                            //and it's not either side of a suggested word, then highlight\n                            if (!$('#' + that.cd.wordclass + '_' + match.pposition).hasClass(that.cd.suggestionclass)&&\n                                !$('#' + that.cd.wordclass + '_' + missingwordspacenumber).hasClass(that.cd.suggestionclass)) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).addClass(that.cd.wordomittedclass);\n                            }\n                            //compile a list of tpositions that we have missed. So we can highlight them on \"tap\"\n                            var tpositions = [];\n                            for(var i = prevmatch.tposition + 1; i < match.tposition; i++) {\n                                tpositions.push(i);\n                            }\n                            //loop through the words and spaces that make up the gap and record the tpositions\n                            //if it's just a missing word(s) with no corrections, we simply mark up the space with the tpositions\n                            var p_gapcount = (match.pposition - prevmatch.pposition) -1;\n                            if(p_gapcount ===0) {\n                                $('#' + that.cd.spaceclass + '_' + missingwordspacenumber).attr('data-tpositions', tpositions.join(','));\n                            }else{\n                                for(var z = prevmatch.pposition + 1; z < match.pposition; z++) {\n                                    $('#' + that.cd.spaceclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                    $('#' + that.cd.wordclass + '_' + z).attr('data-tpositions', tpositions.join(','));\n                                }\n                            }\n                        }\n                    }\n                    //Always mark up the current words tposition as well\n                    $('#' + that.cd.wordclass + '_' + match.pposition).attr('data-tpositions', match.tposition);\n                    //store this match as the new prevmatch so on the next loop pass we can compare\n                    prevmatch = match;\n                });//end of $ each loop\n            }\n\n        },\n    };\n});"],"names":["define","$","log","debug","controls","cd","correctionscontainer","insertclass","passagewordclass","wordclass","spaceclass","suggestionclass","wordomittedclass","aiunmatched","aicorrected","options","errorwords","grammarmatches","suggestedwords","init","config","theid","configcontrol","get","opts","JSON","parse","value","remove","hasOwnProperty","register_controls","this","markup_suggestedwords","markup_unmatchedwords","register_events","that","on","tpositions","attr","highlightoriginal","setTimeout","dehighlightoriginal","tpositionstring","split","each","index","tposition","addClass","removeClass","m","wordnumber","prevmatch","pposition","match","missingwordspacenumber","hasClass","i","push","join","z"],"mappings":"AAAAA,oCAAO,CAAC,SAAU,aAAa,SAAUC,EAAGC,YAGxCA,IAAIC,MAAM,oCAEH,CAGHC,SAAU,GAGVC,GAAI,CACAC,qBAAsB,4BACtBC,YAAa,6BACbC,iBAAkB,+BAElBC,UAAW,mCACXC,WAAY,oCACZC,gBAAiB,qCACjBC,iBAAkB,mCAClBC,YAAa,uBACbC,YAAa,wBAGjBC,QAAS,CACLC,WAAY,GACZC,eAAgB,GAChBC,eAAgB,IAIpBC,KAAM,SAAUC,YAGRC,MAAQ,IAAMD,OAAM,GACpBE,cAAgBrB,EAAEoB,OAAOE,IAAI,MAC7BD,cAAe,KACXE,KAAOC,KAAKC,MAAMJ,cAAcK,OACpCzB,IAAIC,MAAMqB,MACVvB,EAAEoB,OAAOO,SAGqB,KAA1BJ,KAAI,mBACCT,QAAQG,eAAiBO,KAAKC,MAAMF,KAAI,oBAExCT,QAAQG,eAAiB,GAEH,KAA3BM,KAAI,oBACCT,QAAQE,eAAiBQ,KAAKC,MAAMF,KAAI,qBAExCT,QAAQE,eAAkB,OAIhC,CAAA,IAAGG,OAAOS,eAAe,mBAC5BT,OAAOS,eAAe,8BAOtB3B,IAAIC,MAAM,mEALDY,QAAQG,eAAiBO,KAAKC,MAAMN,OAAM,oBAC1CL,QAAQE,eAAiBQ,KAAKC,MAAMN,OAAM,qBASlDU,oBAEL5B,IAAIC,MAAM4B,KAAKhB,cAGViB,6BAEAC,6BAGAC,mBAKTJ,kBAAmB,gBAEV1B,SAASE,qBAAuBL,EAAE,IAAM8B,KAAK1B,GAAGC,uBAIzD4B,gBAAiB,eACTC,KAAOJ,UAEN3B,SAASE,qBAAqB8B,GAAG,QAAQ,IAAML,KAAK1B,GAAGI,UAAY,KAAOsB,KAAK1B,GAAGK,YAAY,eAC3F2B,WAAapC,EAAE8B,MAAMO,KAAK,wBACJ,IAAfD,YAA6C,KAAfA,aACzCF,KAAKI,kBAAkBF,YACvBG,YAAW,WACPL,KAAKM,oBAAoBJ,cAC1B,cAIFjC,SAASE,qBAAqB8B,GAAG,YAAa,IAAML,KAAK1B,GAAGI,UAAY,KAAOsB,KAAK1B,GAAGK,YAAa,eACjG2B,WAAapC,EAAE8B,MAAMO,KAAK,wBACJ,IAAfD,YAA6C,KAAfA,YACzCF,KAAKI,kBAAkBF,oBAItBjC,SAASE,qBAAqB8B,GAAG,WAAW,IAAML,KAAK1B,GAAGI,UAAY,KAAOsB,KAAK1B,GAAGK,YAAa,eAC/F2B,WAAapC,EAAE8B,MAAMO,KAAK,wBACJ,IAAfD,YAA6C,KAAfA,YACzCF,KAAKM,oBAAoBJ,gBAIjCE,kBAAmB,SAAUG,qBACrBP,KAAOJ,KACPM,WAAaK,gBAAgBC,MAAM,KACvC1C,EAAE2C,KAAKP,YAAY,SAAUQ,MAAOC,WAChC7C,EAAE,IAAMkC,KAAK9B,GAAGG,iBAAmB,IAAMsC,WAAWC,SAASZ,KAAK9B,GAAGS,iBAI7E2B,oBAAqB,SAAUC,qBACvBP,KAAOJ,KACPM,WAAaK,gBAAgBC,MAAM,KACvC1C,EAAE2C,KAAKP,YAAY,SAAUQ,MAAOC,WAChC7C,EAAE,IAAMkC,KAAK9B,GAAGG,iBAAmB,IAAMsC,WAAWE,YAAYb,KAAK9B,GAAGS,iBAIhFkB,sBAAuB,eACfiB,EAAIlB,KACR9B,EAAE2C,KAAKK,EAAElC,QAAQG,gBAAgB,SAAU2B,OACnC5C,EAAE,IAAMgD,EAAE5C,GAAGC,qBAAuB,KAAO2C,EAAE5C,GAAGI,UAAY,IAAOwC,EAAElC,QAAQG,eAAe2B,OAAOK,YAAaH,SAASE,EAAE5C,GAAGM,qBAc1IsB,sBAAuB,eACfE,KAAOJ,QACPA,KAAKhB,QAAQE,eAAgB,KAEzBkC,UAAY,CAACL,UAAW,EAAGM,UAAW,GAC1CnD,EAAE2C,KAAKb,KAAKhB,QAAQE,gBAAgB,SAAU4B,MAAOQ,UAK7CA,MAAMP,UAAYK,UAAUL,UAAW,EAAG,KACtCQ,uBAAyBD,MAAMD,UAAY,KAC5CE,uBAAuB,EAAG,CAGpBrD,EAAE,IAAMkC,KAAK9B,GAAGI,UAAY,IAAM4C,MAAMD,WAAWG,SAASpB,KAAK9B,GAAGM,kBACpEV,EAAE,IAAMkC,KAAK9B,GAAGI,UAAY,IAAM6C,wBAAwBC,SAASpB,KAAK9B,GAAGM,kBAC5EV,EAAE,IAAMkC,KAAK9B,GAAGK,WAAa,IAAM4C,wBAAwBP,SAASZ,KAAK9B,GAAGO,0BAG5EyB,WAAa,GACTmB,EAAIL,UAAUL,UAAY,EAAGU,EAAIH,MAAMP,UAAWU,IACtDnB,WAAWoB,KAAKD,MAKH,IADCH,MAAMD,UAAYD,UAAUC,UAAY,EAEtDnD,EAAE,IAAMkC,KAAK9B,GAAGK,WAAa,IAAM4C,wBAAwBhB,KAAK,kBAAmBD,WAAWqB,KAAK,eAE/F,IAAIC,EAAIR,UAAUC,UAAY,EAAGO,EAAIN,MAAMD,UAAWO,IACtD1D,EAAE,IAAMkC,KAAK9B,GAAGK,WAAa,IAAMiD,GAAGrB,KAAK,kBAAmBD,WAAWqB,KAAK,MAC9EzD,EAAE,IAAMkC,KAAK9B,GAAGI,UAAY,IAAMkD,GAAGrB,KAAK,kBAAmBD,WAAWqB,KAAK,OAM7FzD,EAAE,IAAMkC,KAAK9B,GAAGI,UAAY,IAAM4C,MAAMD,WAAWd,KAAK,kBAAmBe,MAAMP,WAEjFK,UAAYE"}