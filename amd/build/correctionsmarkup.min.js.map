{"version":3,"file":"correctionsmarkup.min.js","sources":["../src/correctionsmarkup.js"],"sourcesContent":["define(['jquery', 'core/log'], function ($, log) {\n    \"use strict\"; // jshint ;_;\n\n    log.debug('Corrections Markup: initialising');\n\n    return {\n        //controls\n\n        controls: {},\n\n        //class definitions\n        cd: {\n            correctionscontainer: 'mod_solo_corrections_cont',\n            wordclass: 'mod_solo_grading_correctionsword',\n            suggestionclass: 'mod_solo_corrections_suggestedword',\n            aiunmatched: 'mod_solo_aiunmatched',\n        },\n\n        options: {\n            errorwords: {},\n            grammarmatches: {},\n        },\n\n\n        init: function (config) {\n\n            //pick up opts from html\n            var theid = '#' + config['id'];\n            var configcontrol = $(theid).get(0);\n            if (configcontrol) {\n                var opts = JSON.parse(configcontrol.value);\n                log.debug(opts);\n                $(theid).remove();\n            } else {\n                //if there is no config we might as well give up\n                log.debug('Corrections Markup js: No config found on page. Giving up.');\n                return;\n            }\n\n            //register the controls\n            this.register_controls();\n\n\n            if (opts['sessionerrors'] !== '') {\n                this.options.suggestedwords = JSON.parse(opts['sessionerrors']);\n            } else {\n                this.options.suggestedwords = {};\n            }\n            if (opts['sessionmatches'] !== '') {\n                this.options.grammarmatches = JSON.parse(opts['sessionmatches']);\n            } else {\n                this.options.grammarmatches  = {};\n            }\n\n\n            log.debug(this.options);\n\n            //markup suggested words\n            this.markup_suggestedwords();\n            //mark up unmatched words\n            this.markup_unmatchedwords();\n\n            //register events\n            this.register_events();\n\n        },\n\n\n        register_controls: function () {\n\n            this.controls.correctionscontainer = $(\".\" + this.cd.correctionscontainer);\n\n        },\n\n        register_events: function () {\n            var that = this;\n            //set up event handlers\n            this.controls.correctionscontainer.on('click','.' + this.cd.wordclass, function () {\n                    var wordnumber = parseInt($(this).attr('data-wordnumber'));\n                    //do something\n                log.debug(wordnumber);\n\n            });\n\n        },\n\n\n        markup_suggestedwords: function () {\n            var m = this;\n            $.each(m.options.suggestedwords, function (index) {\n                log.debug('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber));\n                    $('.' + m.cd.correctionscontainer + ' #' + m.cd.wordclass + '_' + (m.options.suggestedwords[index].wordnumber)).addClass(m.cd.suggestionclass);\n                }\n            );\n        },\n\n        //mark up all ai unmatched words as aiunmatched\n        // if words have been removed from passage, these wont be marked up yet\n        markup_unmatchedwords: function () {\n            var that = this;\n            if (this.options.grammarmatches) {\n                var prevmatch = 0;\n                $.each(this.options.grammarmatches, function (index, match) {\n                    //if there is a gap since the previous word match, it's a missing word (ie not in original)\n                    if((match.tposition - prevmatch)>1) {\n                        var missingcnt = match.tposition - prevmatch -1;\n                        for(var mi= 0; mi <missingcnt;mi++) {\n                            var missingwordnumber = match.tposition - 1 - mi;\n                            $('#' + that.cd.wordclass + '_' + missingwordnumber).addClass(that.cd.suggestionclass);\n                        }\n                    }\n                    prevmatch = match.tposition;\n                });\n            }\n\n        },\n    };\n});"],"names":["define","$","log","debug","controls","cd","correctionscontainer","wordclass","suggestionclass","aiunmatched","options","errorwords","grammarmatches","init","config","theid","configcontrol","get","opts","JSON","parse","value","remove","register_controls","suggestedwords","this","markup_suggestedwords","markup_unmatchedwords","register_events","on","wordnumber","parseInt","attr","m","each","index","addClass","that","prevmatch","match","tposition","missingcnt","mi","missingwordnumber"],"mappings":"AAAAA,oCAAO,CAAC,SAAU,aAAa,SAAUC,EAAGC,YAGxCA,IAAIC,MAAM,oCAEH,CAGHC,SAAU,GAGVC,GAAI,CACAC,qBAAsB,4BACtBC,UAAW,mCACXC,gBAAiB,qCACjBC,YAAa,wBAGjBC,QAAS,CACLC,WAAY,GACZC,eAAgB,IAIpBC,KAAM,SAAUC,YAGRC,MAAQ,IAAMD,OAAM,GACpBE,cAAgBf,EAAEc,OAAOE,IAAI,MAC7BD,mBACIE,KAAOC,KAAKC,MAAMJ,cAAcK,OACpCnB,IAAIC,MAAMe,MACVjB,EAAEc,OAAOO,cAQRC,oBAGyB,KAA1BL,KAAI,mBACCR,QAAQc,eAAiBL,KAAKC,MAAMF,KAAI,oBAExCR,QAAQc,eAAiB,GAEH,KAA3BN,KAAI,oBACCR,QAAQE,eAAiBO,KAAKC,MAAMF,KAAI,qBAExCR,QAAQE,eAAkB,GAInCV,IAAIC,MAAMsB,KAAKf,cAGVgB,6BAEAC,6BAGAC,uBA5BD1B,IAAIC,MAAM,+DAiClBoB,kBAAmB,gBAEVnB,SAASE,qBAAuBL,EAAE,IAAMwB,KAAKpB,GAAGC,uBAIzDsB,gBAAiB,gBAGRxB,SAASE,qBAAqBuB,GAAG,QAAQ,IAAMJ,KAAKpB,GAAGE,WAAW,eAC3DuB,WAAaC,SAAS9B,EAAEwB,MAAMO,KAAK,oBAE3C9B,IAAIC,MAAM2B,gBAOlBJ,sBAAuB,eACfO,EAAIR,KACRxB,EAAEiC,KAAKD,EAAEvB,QAAQc,gBAAgB,SAAUW,OACvCjC,IAAIC,MAAM,IAAM8B,EAAE5B,GAAGC,qBAAuB,KAAO2B,EAAE5B,GAAGE,UAAY,IAAO0B,EAAEvB,QAAQc,eAAeW,OAAOL,YACvG7B,EAAE,IAAMgC,EAAE5B,GAAGC,qBAAuB,KAAO2B,EAAE5B,GAAGE,UAAY,IAAO0B,EAAEvB,QAAQc,eAAeW,OAAOL,YAAaM,SAASH,EAAE5B,GAAGG,qBAO1ImB,sBAAuB,eACfU,KAAOZ,QACPA,KAAKf,QAAQE,eAAgB,KACzB0B,UAAY,EAChBrC,EAAEiC,KAAKT,KAAKf,QAAQE,gBAAgB,SAAUuB,MAAOI,UAE7CA,MAAMC,UAAYF,UAAW,UACzBG,WAAaF,MAAMC,UAAYF,UAAW,EACtCI,GAAI,EAAGA,GAAID,WAAWC,KAAM,KAC5BC,kBAAoBJ,MAAMC,UAAY,EAAIE,GAC9CzC,EAAE,IAAMoC,KAAKhC,GAAGE,UAAY,IAAMoC,mBAAmBP,SAASC,KAAKhC,GAAGG,iBAG9E8B,UAAYC,MAAMC"}